#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define NOR 0
#define NUM 1
#define NAV 2
#define SYM 3
#define FUN 4


&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC LSHFT RSHFT>;
};

/ {
    macros {
        macro_shiftable_sch: macro_shiftable_sch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp S
                    &macro_release &kp RSHIFT
                    &macro_tap &kp C &kp H
            >;
            tap-ms = <10>;
        };
    };
};


#define COMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};
#define SLOWCOMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <40>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};
#define TCOMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};

//  _______________________________________________________________________________
// |_    00  \  01  \  02  \  03  \  04  \   /  05  /  06  /  07  /  08  /  09    _|
//   |_   10  |  11  |  12  |  13  |  14  | |  15  |  16  |  17  |  18  |  19   _|
//     | 20  /  21  /  22  /  23  /  24  /   \  25  \  26  \  27  \  28  \  29 |
//      -------------------|  30  |  31 | ENC | 33  |  34  |-------------------
//                                         32

/{
    combos {
        compatible = "zmk,combos";
/* usually on base layer */
        COMBO(q, &kp Q, 1 2)
        COMBO(v, &kp V, 2 3)
        COMBO(x, &kp X, 21 22)
        COMBO(shiftablesch, &macro_shiftable_sch, 1 3)
        COMBO(slash, &kp SLASH, 27 28)
        COMBO(minus, &kp MINUS, 26 27)
        COMBO(semi, &kp SEMICOLON, 27 34)
        COMBO(colon, &kp COLON, 28 34)
/* parentheticals */
        COMBO(lbrc, &kp LBRC, 1 11)
        COMBO(lbkt, &kp LBKT, 2 12)
        COMBO(lpar, &kp LPAR, 3 13)
        COMBO(lt, &kp LT, 4 14)
        COMBO(rt, &kp GT, 5 15)
        COMBO(rpar, &kp RPAR, 6 16)
        COMBO(rbkt, &kp RBKT, 7 17)
        COMBO(rbrc, &kp RBRC, 8 18)
/* whitespace etc */
        COMBO(tab, &kp TAB, 5 6)
        COMBO(esc, &kp ESC, 22 23)
        COMBO(enter, &kp ENTER, 26 28)
/* deletion */
        COMBO(bspc, &kp BSPC, 6 7)
        SLOWCOMBO(del, &kp DEL, 7 8)
        COMBO(delword, &kp LC(BSPC), 6 8)
/* special shifting */
        COMBO(loss, &sk LSFT, 11 13)
        COMBO(ross, &sk RSFT, 16 18)
        COMBO(caps, &caps_word, 13 16)
        COMBO(capslock, &kp CAPSLOCK, 1 8)
    };
};

//  _______________________________________________________________________________
// |_    00  \  01  \  02  \  03  \  04  \   /  05  /  06  /  07  /  08  /  09    _|
//   |_   10  |  11  |  12  |  13  |  14  | |  15  |  16  |  17  |  18  |  19   _|
//     | 20  /  21  /  22  /  23  /  24  /   \  25  \  26  \  27  \  28  \  29 |
//      -------------------|  30  |  31 | ENC | 32  |  33  |-------------------

/ {
    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };

        my_lt: my_layer_taps {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <160>;
            quick-tap-ms = <100>;
            bindings = <&mo &kp>, <&kp>;
        };
        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};


/ {
    keymap {
        compatible = "zmk,keymap";

        norden {
            bindings = <
                &kp Q          &kp L          &kp D          &kp Z          &kp K                      &kp P            &kp W          &kp O          &kp U          &comsem
                &hl LCTRL R    &hl LALT N     &hl LGUI T     &hl LSHFT H    &hl RALT F                 &hr RALT Y       &hr RSHFT C    &hr RGUI E     &hr LALT I     &hr RCTRL A
                &kp X          &kp J          &kp M          &kp B          &kp V                      &kp SQT          &kp G          &kp SEMI       &kp SLASH      &dotcol
                                                             &my_lt NUM TAB &my_lt NAV S   &kp C_MUTE  &my_lt SYM SPACE &my_lt FUN SQT
            >;
        };
        numbers {
            bindings = <
                &kp COMMA      &kp N9         &kp N8         &kp N7         &kp PLUS                   &kp PLUS       &kp N4         &kp N5         &kp N6         &trans
                &kp DOT        &kp N6         &kp N5         &kp N4         &kp MINUS                  &kp MINUS      &kp N1         &kp N2         &kp N3         &none
                &kp DOT        &kp N3         &kp N2         &kp N1         &none                      &none          &kp N7         &kp N8         &kp N9         &trans
                                                             &trans         &trans         &trans      &trans         &kp N0 
            >;
        };
        navigation {
            bindings = <
                &none          &none          &none          &none          &none                      &none          &trans         &trans         &trans         &none
                &sk LCTRL      &sk LALT       &sk LGUI       &sk LSHFT      &none                      &none          &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT
                &none          &kp C_AC_COPY  &kp C_AC_CUT   &kp C_AC_PASTE &none                      &none          &kp HOME       &kp C_MUTE     &kp END        &none
                                                             &trans         &trans         &trans      &kp C_VOL_DN   &kp C_VOL_UP
            >;
        };
        symbols {
            bindings = <
                &none          &none          &none          &none          &none                      &none          &trans         &trans         &trans         &none
                &kp EXCL       &kp AT         &kp HASH       &kp DOLLAR     &none                      &none          &kp AMPERSAND  &kp ASTERISK   &kp PERCENT    &kp CARET
                &none          &kp GRAVE      &kp DQT        &kp UNDERSCORE &none                      &none          &kp BACKSLASH  &kp PIPE       &kp EQUAL      &none
                                                             &kp TILDE      &trans         &trans      &trans         &trans
            >;
        };
        function {
            bindings = <
                &none          &bootloader    &none          &none          &none                      &none          &kp F7         &kp F8         &kp F9         &none
                &bootloader    &kp F12        &kp F11        &kp F10        &none                      &none          &kp F4         &kp F5         &kp F6         &none
                &none          &kp F9         &kp F8         &kp F7         &none                      &none          &kp F1         &kp F2         &kp F3         &none
                                                             &none          &trans         &trans      &trans         &trans
            >;
        };

    };
};
